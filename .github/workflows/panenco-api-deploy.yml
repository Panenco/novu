name: 'Panenco API deploy'

on:
  workflow_dispatch:
  push:
    branches: ['panenco']

env:
  ZONE: europe-west1-b
  PROJECT_REGISTRY: eu.gcr.io/${{secrets.GOOGLE_PROJECT_ID}}

jobs:
  deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          [
            {
              name: 'ws',
              machineType: 'f1-micro',
              buildCommand: 'docker-compose -f docker/docker-compose.panenco.yml -p novu build',
              namedPorts: 'ws:3002',
            },
            {
              name: 'api',
              machineType: 'e2-small',
              buildCommand: 'DOCKER_BUILDKIT=1 pnpm docker:build',
              namedPorts: 'api:3000',
            },
          ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.4
      - name: Install deps
        run: cd apps/api && pnpm --filter novuhq install

      - name: Login
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Set project
        run: gcloud --quiet config set project ${{secrets.GOOGLE_PROJECT_ID}}

      - name: Docker google auth
        run: gcloud auth configure-docker -q

      - name: Build Docker image
        run: ${{ matrix.service.buildCommand }}

      - name: Tag Docker image
        run: docker tag novu-${{ matrix.service.name }} $PROJECT_REGISTRY/novu-${{ matrix.service.name }}

      - name: Push Docker image
        run: docker push $PROJECT_REGISTRY/novu-${{ matrix.service.name }}

      - name: Create env file
        run: gcloud secrets versions access latest --secret=novu > .env.docker

      - name: Create instance template
        run: >
          gcloud compute instance-templates create-with-container ${{ matrix.service.name }}-template-${{github.run_number}}
          --container-env-file .env.docker
          --container-image $PROJECT_REGISTRY/novu-${{ matrix.service.name }}:latest
          --machine-type ${{ matrix.service.machineType }}
          --tags=allow-health-check

      - name: Check if MIG exists
        id: mig_exists
        continue-on-error: true
        run: >
          gcloud compute instance-groups managed describe ${{ matrix.service.name }}-group
          --zone $ZONE

      - name: Create MIG
        if: steps.mig_exists.outcome != 'success'
        run: >
          gcloud compute instance-groups managed create ${{ matrix.service.name }}-group
          --initial-delay=180s
          --health-check ${{ matrix.service.name }}-health-check
          --base-instance-name ${{ matrix.service.name }}-instance
          --size 2
          --template ${{ matrix.service.name }}-template-${{github.run_number}}
          --zone $ZONE

      - name: Set named ports on MIG
        if: steps.mig_exists.outcome != 'success'
        run: >
          gcloud compute instance-groups set-named-ports ${{ matrix.service.name }}-group
          --named-ports=${{ matrix.service.namedPorts }}
          --zone=$ZONE

      - name: Perform rolling update on MIG
        if: steps.mig_exists.outcome == 'success'
        run: >
          gcloud compute instance-groups managed rolling-action start-update ${{ matrix.service.name }}-group
          --version=template=${{ matrix.service.name }}-template-${{github.run_number}}
          --zone $ZONE
