name: 'Panenco API deploy'

on:
  push:
    branches: ['panenco']

env:
  WS_IMAGE: eu.gcr.io/${{secrets.GOOGLE_PROJECT_ID}}/novu-ws
  API_IMAGE: eu.gcr.io/${{secrets.GOOGLE_PROJECT_ID}}/novu-api
  WS_TEMPLATE_NAME: ws-template-${{github.run_number}}
  API_TEMPLATE_NAME: api-template-${{github.run_number}}
  WS_GROUP_NAME: ws-group
  API_GROUP_NAME: api-group
  ZONE: europe-west1-b

jobs:
  deploy-api-and-ws:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.4
      - name: Install deps
        run: cd apps/api && pnpm --filter novuhq install

      - name: Login
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}'
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v0

      - name: Set project
        run: gcloud --quiet config set project ${{secrets.GOOGLE_PROJECT_ID}}

      - name: Docker google auth
        run: gcloud auth configure-docker -q

      - name: Build API image
        run: DOCKER_BUILDKIT=1 pnpm docker:build

      - name: Build WS image
        run: docker-compose -f docker/docker-compose.panenco.yml -p novu build

      - name: Tag API image
        run: docker tag novu-api $API_IMAGE

      - name: Tag WS image
        run: docker tag novu-ws $WS_IMAGE

      - name: Push API image
        run: docker push $API_IMAGE

      - name: Push WS image
        run: docker push $WS_IMAGE

      - name: Create env file
        run: gcloud secrets versions access latest --secret=novu > .env.docker

      - name: Create API instance template
        run: >
          gcloud compute instance-templates create-with-container $API_TEMPLATE_NAME
          --container-env-file .env.docker
          --container-image $API_IMAGE:latest 
          --machine-type e2-small
          --tags=allow-health-check

      - name: Create WS instance template
        run: >
          gcloud compute instance-templates create-with-container $WS_TEMPLATE_NAME
          --container-env-file .env.docker
          --container-image $WS_IMAGE:latest 
          --machine-type f1-micro
          --tags=allow-health-check

      - name: Check if API MIG exists
        id: api_mig_exists
        continue-on-error: true
        run: >
          gcloud compute instance-groups managed describe $API_GROUP_NAME
          --zone $ZONE

      - name: Check if WS MIG exists
        id: ws_mig_exists
        continue-on-error: true
        run: >
          gcloud compute instance-groups managed describe $WS_GROUP_NAME
          --zone $ZONE

      - name: Create API MIG
        if: steps.api_mig_exists.outcome != 'success'
        run: >
          gcloud compute instance-groups managed create $API_GROUP_NAME
          --health-check api-health-check
          --base-instance-name api-instance
          --size 2
          --template $API_TEMPLATE_NAME
          --zone $ZONE

      - name: Create WS MIG
        if: steps.ws_mig_exists.outcome != 'success'
        run: >
          gcloud compute instance-groups managed create $WS_GROUP_NAME
          --health-check ws-health-check
          --base-instance-name ws-instance
          --size 2
          --template $WS_TEMPLATE_NAME
          --zone $ZONE

      - name: Set named ports on API MIG
        if: steps.api_mig_exists.outcome != 'success'
        run: >
          gcloud compute instance-groups set-named-ports $API_GROUP_NAME
          --named-ports=api:3000
          --zone=$ZONE

      - name: Set named ports on WS MIG
        if: steps.ws_mig_exists.outcome != 'success'
        run: >
          gcloud compute instance-groups set-named-ports $WS_GROUP_NAME
          --named-ports=ws:3002 
          --zone=$ZONE

      - name: Perform rolling update on API MIG
        if: steps.api_mig_exists.outcome == 'success'
        run: >
          gcloud compute instance-groups managed rolling-action start-update $API_GROUP_NAME
          --version=template=$API_TEMPLATE_NAME 
          --zone $ZONE

      - name: Perform rolling update on WS MIG
        if: steps.ws_mig_exists.outcome == 'success'
        run: >
          gcloud compute instance-groups managed rolling-action start-update $WS_GROUP_NAME
          --version=template=$WS_TEMPLATE_NAME 
          --zone $ZONE
